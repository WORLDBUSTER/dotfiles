/* Applies opinionated theming based on a base16 color scheme
*/
{ config, lib, pkgs, ... }:

let
  paletteLib = import ../palette.nix { inherit lib; };
  inherit (lib) mkEnableOption mkIf mkOption types;
  inherit (types) mkOptionType;
  inherit (paletteLib) paletteType mkSwatch;

  fontType = types.submodule
    {
      options = {
        package = mkOption {
          type = types.package;
          description = "The package supplying the font.";
        };
        name = mkOption {
          type = types.str;
          description = "The font family name.";
        };
        size = mkOption {
          type = types.ints.positive;
          description = "The point size of the font.";
        };
      };
    };
in
{
  options.muse.theme = {
    enable = mkEnableOption "Muse theming for a variety of apps";
    colors = mkOption {
      type = types.nullOr paletteType;
      description = "The color theme to use for theming.";
      apply = mkSwatch;
    };
    sansFont = mkOption {
      type = fontType;
      description = "Default sans-serif font to use.";
      default = {
        package = pkgs.inter;
        name = "Inter";
        size = 12;
      };
    };
    codeFont = mkOption {
      type = fontType;
      description = "Default monospace font to use.";
      default = {
        package = pkgs.iosevka-muse.normal;
        name = "Iosevka Muse";
        size = 12.0;
      };
    };

    arpeggio = {
      enable = mkEnableOption "arpeggio to generate themes from a wallpaper";

      wallpaper = mkOption {
        type = types.path;
        description = "The wallpaper to use for palette generation.";
      };

      generatedPalette = mkOption {
        type = types.attrsOf (types.strMatching "^#[A-Fa-f0-9]{6}$");
        description = "The palette generated by arpeggio.";
        readOnly = true;
      };
    };

    matchpal = mkOption {
      description = "Settings for matchpal, the palette-matching wallpaper processor.";
      type = types.submodule {
        options = {
          enable = mkEnableOption "matchpal theming for wallpapers. Will use <option>muse.theme.colors</option> for colors";
          wallpapers = mkOption {
            description = "Settings for wallpapers.";
            type = types.submodule {
              options = {
                dir = mkOption {
                  type = types.path;
                  description = "A path containing wallpapers.";
                  default = null;
                };
                final = mkOption {
                  type = types.path;
                  description = "The final directory containing processed wallpapers.";
                  readOnly = true;
                };
              };
            };
          };
        };
      };
    };
  };
  config =
    let
      cfg = config.muse.theme;
    in
    mkIf cfg.enable {
      muse = {

        theme.matchpal.wallpapers.final =
          let
            wallpapersPath = builtins.path {
              name = "wallpapers";
              path = cfg.matchpal.wallpapers.dir;
            };

            paletteFile = pkgs.writeTextFile {
              name = "matchpal-palette";
              text = ''
                ${cfg.colors.base00}
                ${cfg.colors.base01}
                ${cfg.colors.base02}
                ${cfg.colors.base03}
                ${cfg.colors.base04}
                ${cfg.colors.base05}
                ${cfg.colors.base06}
                ${cfg.colors.base07}
                ${cfg.colors.base08}
                ${cfg.colors.base09}
                ${cfg.colors.base0A}
                ${cfg.colors.base0B}
                ${cfg.colors.base0C}
                ${cfg.colors.base0D}
                ${cfg.colors.base0E}
                ${cfg.colors.base0F}
              '';
            };
          in
          mkIf cfg.matchpal.enable
            (pkgs.stdenv.mkDerivation
              {
                name = "muse-matchpal-wallpapers";
                src = wallpapersPath;
                dontConfigure = true;
                buildPhase = ''
                  mkdir -p $out

                  for wallpaper in ${wallpapersPath}/*
                  do
                    name=$(basename $wallpaper)
                    echo "changing palette for $name"
                    ${pkgs.matchpal}/bin/matchpal --palette ${paletteFile} --input $wallpaper --output $out/$name
                  done
                '';
                dontInstall = true;
              });
      };
    };
}
